searchState.loadedDescShard("pipeline", 0, "fields not in the columns will be discarded to prevent …\nNo value.\nPipeline info. A tuple of timestamp and pipeline reference.\nPipeline version. An optional timestamp with nanosecond …\nSome value of type <code>T</code>.\nValue can be used as type acts as value: the enclosed …\nSNAFU context selector for the <code>Error::BuildDfLogicalPlan</code> …\nSNAFU context selector for the <code>Error::CastType</code> variant\nSNAFU context selector for the <code>Error::Catalog</code> variant\nSNAFU context selector for the <code>Error::CollectRecords</code> …\nSNAFU context selector for the <code>Error::CompilePipeline</code> …\nSNAFU context selector for the <code>Error::CreateTable</code> variant\nSNAFU context selector for the <code>Error::DataFrame</code> variant\nContains the error value\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InsertPipeline</code> …\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::PipelineNotFound</code> …\nSNAFU context selector for the <code>Error::PipelineTableNotFound</code>…\nSNAFU context selector for the <code>Error::PipelineTransform</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndefault behavior does nothing and returns the input value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommon Media Client Data Specification: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly support string value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntry to parse val with timezone first, if failed, parse …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsupport string, integer, float, time, epoch\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA processor to replace all matches of a pattern in string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA processor to join each element of an array into a single …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly support string value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nonly support string value if no value found from a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nonly support string value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn Failure behavior when transform fails\nonly field is required\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nfields not in the columns will be discarded to prevent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA hash map implemented with quadratic probing and SIMD …\nValue can be used as type acts as value: the enclosed …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator which uses a closure to determine if …\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGet a value for a key from the HashMap.\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nCollect all the keys from the HashMap.\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nonly support string, bool, number, null\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nSet a key and value in the HashMap.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nonly support string, bool, number, null\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nPipeline info. A tuple of timestamp and pipeline reference.\nPipeline version. An optional timestamp with nanosecond …\nSome value of type <code>T</code>.\nSNAFU context selector for the <code>Error::BuildDfLogicalPlan</code> …\nSNAFU context selector for the <code>Error::CastType</code> variant\nSNAFU context selector for the <code>Error::Catalog</code> variant\nSNAFU context selector for the <code>Error::CollectRecords</code> …\nSNAFU context selector for the <code>Error::CompilePipeline</code> …\nSNAFU context selector for the <code>Error::CreateTable</code> variant\nSNAFU context selector for the <code>Error::DataFrame</code> variant\nContains the error value\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InsertPipeline</code> …\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::PipelineNotFound</code> …\nSNAFU context selector for the <code>Error::PipelineTableNotFound</code>…\nSNAFU context selector for the <code>Error::PipelineTransform</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPipelineOperator is responsible for managing pipelines. It …\nCreate a table request for the pipeline table.\nDelete a pipeline by name from pipeline table.\nReturns the argument unchanged.\nGet a pipeline from the pipeline table.\nGet a pipeline table from the cache.\nInsert a pipeline into the pipeline table.\nCalls <code>U::from(self)</code>.\nCreate a new PipelineOperator.\nPipeline table cache size.\nPipeline table cache time to live.\nPipelineTable is a table that stores the pipeline schema …\nBuild the column schemas for inserting a row into the …\nBuild the schema for the pipeline table. Returns the (time …\nCompile a pipeline from a string.\nReturns the argument unchanged.\nGet a pipeline by name. If the pipeline is not in the …\nInsert a pipeline into the pipeline table and compile it. …\nInsert a pipeline into the pipeline table.\nCalls <code>U::from(self)</code>.\nCreate a new PipelineTable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPipelineOperator is responsible for managing pipelines. It …\nPipelineTable is a table that stores the pipeline schema …")